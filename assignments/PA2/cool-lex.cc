#line 2 "cool-lex.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define FLEX_DEBUG
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;

#define FLEX_DEBUG
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 45
#define YY_END_OF_BUFFER 46
static yyconst short int yy_accept[262] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   46,   45,
       44,   43,    1,   29,   42,   42,   42,   42,   37,   42,
       42,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,    1,    8,    7,    8,    8,   34,   30,
       31,   34,   32,   36,   35,   35,    3,    4,    0,   37,
       26,   28,   23,   40,   40,   40,    0,   40,   40,    0,
       11,   11,   12,   13,   40,   12,   40,   40,    0,   40,
       40,    0,   22,   22,   40,    0,   40,    0,   40,    0,
       41,   41,   41,   41,   41,   41,   11,   11,   12,   13,

       41,   41,   41,   41,   41,   22,   41,   41,   41,    0,
       41,    0,    0,   12,    0,    0,   13,    0,    0,   11,
        5,    6,   33,    0,    2,   40,    0,   40,    0,    0,
       40,    0,   40,    0,    0,   40,    0,   40,    0,    0,
       15,   15,   40,    0,   15,   24,   24,   27,   27,   24,
       40,    0,   40,    0,   40,    0,   41,   41,   41,   41,
       41,    0,   41,   41,   15,   41,   24,   27,   41,   41,
       41,    0,    0,   41,   15,    0,    0,    0,   27,    0,
        0,    0,   15,   15,   20,   20,   40,    0,   20,   10,
       10,   21,   21,   10,   40,    0,   40,    0,    0,   16,

       16,   17,   17,   18,   18,   40,    0,   20,   41,   10,
       21,   41,    0,   41,   41,   16,   17,   18,   38,   38,
       18,   41,   18,   10,   16,   21,   21,   10,   10,   17,
       10,    9,    9,   40,    0,   40,    0,    0,   19,   19,
        9,   39,   39,   41,   41,   19,    9,   40,    0,   25,
       25,   25,   41,   25,   40,    0,   41,   14,   14,   14,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    4,    4,    4,    4,    4,    6,
        7,    8,    9,    9,   10,    9,    9,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,    9,    9,   12,
       13,   14,    4,    9,   15,   16,   17,   18,   19,   20,
       16,   21,   22,   16,   16,   23,   16,   24,   25,   26,
       16,   27,   28,   29,   30,   31,   32,   16,   16,   16,
        4,   33,    4,    4,   34,    4,   35,   36,   37,   38,

       39,   40,   36,   41,   42,   36,   36,   43,   36,   44,
       45,   46,   36,   47,   48,   49,   50,   51,   52,   36,
       36,   36,    9,   53,    9,    9,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1,    1
    } ;

static yyconst short int yy_base[269] =
    {   0,
        0,    0,   52,   53,   59,   60,   63,   64,  162,  786,
      786,  786,  786,  786,  128,  786,  122,  118,  116,   60,
      106,    0,   56,   52,   35,   54,   65,   87,   81,   58,
       55,   94,    0,  107,   96,  116,  113,  129,  140,  103,
      127,  143,  134,  182,  786,  786,   89,   82,  786,  786,
      786,    0,  786,  786,  786,  786,  786,  786,   84,   75,
      786,  786,  786,    0,  135,  156,  180,  166,  163,  203,
        0,  786,    0,  179,  206,  213,  200,  215,  216,   93,
      214,  223,    0,  786,  217,  233,  252,  254,  255,  257,
        0,  253,  259,  256,  265,  260,    0,  272,    0,  261,

      280,  267,  292,  160,  290,    0,  296,  303,  294,  316,
      306,  304,  321,  786,  339,  336,  319,  338,  362,  401,
      786,  786,  786,   82,  786,  315,  343,  337,  347,  386,
      382,  385,  391,  394,  438,  388,  398,  420,  423,  439,
        0,  786,  353,  433,  434,    0,  786,    0,  786,  786,
      440,  446,  437,  450,  459,  462,  469,  468,  478,  481,
      472,  476,  487,  482,    0,  484,    0,    0,  490,  495,
      513,  517,  523,  515,  786,  521,  532,  546,  552,  556,
      560,  563,  786,  600,    0,  786,  531,  558,  559,    0,
      786,    0,  786,  786,  567,  583,  596,  599,  613,    0,

      786,    0,  786,    0,  786,  603,  608,    0,  606,    0,
        0,  612,  631,  630,  636,    0,    0,    0,    0,  786,
      786,  643,  648,  640,  786,  649,  644,  786,  647,  656,
      691,    0,  786,  663,  664,  661,  689,  690,    0,  786,
        0,    0,  786,  681,  693,    0,  703,  700,  706,    0,
      786,  708,  711,    0,  719,  720,  722,    0,  786,    0,
      786,  775,  777,  779,   79,   70,  781,  783
    } ;

static yyconst short int yy_def[269] =
    {   0,
      261,    1,  262,  262,  263,  263,  264,  264,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  261,  261,  261,  261,  261,  261,  261,
      261,  267,  261,  261,  261,  261,  261,  261,  268,  261,
      261,  261,  261,  265,  265,  265,  261,  265,  265,  261,
      265,  261,  265,  265,  265,  261,  265,  265,  261,  265,
      265,  261,  265,  261,  265,  261,  265,  261,  265,  261,
      266,  266,  266,  266,  266,  266,  266,  261,  266,  266,

      266,  266,  266,  266,  266,  266,  266,  266,  266,  261,
      266,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  268,  261,  265,  261,  265,  261,  261,
      265,  261,  265,  261,  261,  265,  261,  265,  261,  261,
      265,  261,  265,  261,  261,  265,  261,  265,  261,  261,
      265,  261,  265,  261,  265,  261,  266,  266,  266,  266,
      266,  261,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  261,  261,  266,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  265,  261,  265,  261,  261,  265,
      261,  265,  261,  261,  265,  261,  265,  261,  261,  265,

      261,  265,  261,  265,  261,  265,  261,  266,  266,  266,
      266,  266,  261,  266,  266,  266,  266,  266,  266,  261,
      261,  266,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  265,  261,  265,  261,  265,  261,  261,  265,  261,
      266,  266,  261,  266,  266,  266,  261,  265,  261,  265,
      261,  261,  266,  266,  265,  261,  266,  265,  261,  266,
        0,  261,  261,  261,  261,  261,  261,  261
    } ;

static yyconst short int yy_nxt[841] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   16,   18,
       19,   20,   21,   13,   22,   22,   23,   22,   24,   25,
       22,   26,   27,   28,   29,   30,   22,   22,   31,   22,
       22,   32,   13,   13,   33,   33,   34,   33,   35,   36,
       33,   37,   38,   39,   40,   41,   33,   33,   42,   33,
       33,   43,   44,   10,   46,   46,   71,   47,   47,   48,
       48,   50,   50,   51,   51,   55,   55,   56,   56,   61,
       65,   91,   62,   73,   68,   87,   71,   74,   66,   69,
       64,   75,   85,   77,  125,   60,  125,   72,  122,   78,
       65,   52,   52,   73,   68,   87,  121,   74,   66,   69,

       83,   75,   85,   77,   70,   80,   76,   88,   67,   78,
       86,   81,   53,   53,   89,   56,   56,   79,   94,   63,
       83,   92,  106,   95,  146,   80,   60,   59,   58,   93,
       96,   81,   99,   84,   89,   57,  100,   97,   94,   82,
      101,   92,  106,   95,  146,  147,   90,  102,   70,   93,
       96,  107,   99,  103,  111,   84,  100,   97,  104,   67,
      101,  261,  126,  108,  105,   76,  261,  102,   98,  109,
      128,  107,  261,  103,  111,  261,  261,  133,  104,   86,
      261,   79,  126,  108,  105,  261,   90,  127,  261,  109,
      128,  167,   82,  131,  129,  110,  112,  133,  261,  136,

      113,  114,  115,   72,  116,  117,  118,  127,  129,  119,
      261,  167,  147,  131,  129,  134,  112,  134,  132,  136,
      113,  114,  115,   72,  116,  117,  118,  127,  141,  119,
      132,  137,  130,  137,  120,  261,  138,  134,  261,  143,
      144,  151,  148,  139,  142,  261,  261,  261,  141,  261,
      132,  149,  142,  137,  147,  135,  138,  152,  139,  143,
      144,  151,  148,  139,  142,  140,  149,  144,  145,  152,
      153,  149,  154,  158,  147,  150,  155,  152,  156,  160,
      157,  163,  161,  159,  261,  152,  261,  261,  261,  261,
      153,  261,  154,  158,  162,  165,  155,  261,  156,  160,

      157,  163,  161,  159,  154,  127,  154,  156,  132,  156,
      164,  129,  162,  137,  162,  165,  166,  134,  168,  142,
      169,  170,  261,  171,  162,  261,  261,  174,  261,  261,
      164,  127,  139,  185,  154,  261,  166,  261,  168,  137,
      169,  170,  149,  171,  144,  172,  172,  174,  152,  142,
      129,  127,  147,  185,  154,  154,  127,  154,  156,  137,
      156,  186,  178,  132,  187,  172,  149,  186,  173,  142,
      129,  137,  147,  175,  188,  261,  134,  154,  200,  261,
      156,  186,  178,  132,  187,  261,  149,  261,  177,  188,
      179,  176,  139,  261,  188,  186,  134,  261,  200,  188,

      190,  261,  261,  191,  186,  201,  195,  192,  261,  261,
      193,  261,  139,  188,  180,  181,  196,  261,  261,  154,
      190,  137,  156,  191,  186,  178,  195,  192,  182,  183,
      193,  139,  147,  188,  191,  181,  196,  191,  189,  154,
      196,  137,  156,  193,  197,  178,  193,  198,  182,  183,
      196,  139,  147,  184,  193,  261,  191,  196,  201,  201,
      204,  261,  202,  198,  197,  261,  261,  198,  203,  261,
      261,  261,  198,  205,  193,  198,  191,  196,  201,  201,
      204,  206,  202,  198,  207,  201,  201,  208,  203,  205,
      194,  199,  203,  205,  261,  209,  210,  211,  203,  212,

      261,  206,  205,  213,  207,  214,  215,  208,  261,  216,
      261,  207,  217,  261,  207,  209,  210,  211,  218,  212,
      188,  186,  261,  213,  213,  214,  215,  261,  213,  216,
      191,  219,  217,  193,  198,  220,  201,  222,  218,  196,
      261,  220,  203,  207,  205,  261,  205,  205,  261,  261,
      191,  219,  261,  261,  261,  220,  261,  222,  232,  188,
      261,  220,  261,  207,  205,  220,  205,  207,  203,  220,
      191,  201,  193,  223,  203,  221,  193,  201,  232,  188,
      198,  228,  261,  233,  224,  233,  233,  188,  203,  261,
      261,  201,  193,  234,  203,  261,  193,  201,  225,  261,

      198,  228,  261,  261,  225,  233,  233,  188,  226,  235,
      233,  233,  227,  234,  261,  228,  193,  236,  229,  235,
      237,  239,  230,  205,  198,  201,  240,  188,  261,  235,
      242,  261,  261,  241,  237,  235,  193,  236,  229,  235,
      237,  239,  230,  205,  198,  201,  240,  188,  237,  243,
      242,  237,  231,  241,  237,  240,  244,  245,  233,  235,
      240,  246,  261,  261,  243,  238,  240,  233,  261,  243,
      237,  233,  261,  235,  240,  261,  244,  245,  250,  261,
      261,  246,  235,  243,  248,  249,  240,  233,  237,  261,
      237,  233,  233,  235,  240,  240,  233,  261,  250,  235,

      240,  237,  253,  261,  248,  249,  251,  251,  240,  240,
      254,  249,  237,  251,  261,  249,  249,  235,  233,  261,
      251,  261,  253,  261,  249,  261,  251,  251,  255,  240,
      254,  249,  237,  249,  256,  261,  256,  235,  233,  257,
      251,  251,  252,  247,  249,  251,  258,  259,  255,  260,
      261,  261,  256,  261,  256,  252,  256,  261,  256,  257,
      256,  261,  261,  256,  261,  261,  258,  259,  261,  260,
      261,  259,  259,  261,  259,   45,   45,   49,   49,   54,
       54,  123,  123,  124,  124,    9,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261
    } ;

static yyconst short int yy_chk[841] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,   25,    3,    4,    3,
        4,    5,    6,    5,    6,    7,    8,    7,    8,   20,
       23,  266,   20,   26,   24,   31,   25,   26,   23,   24,
      265,   26,   30,   27,  124,   60,   59,   25,   48,   27,
       23,    5,    6,   26,   24,   31,   47,   26,   23,   24,

       29,   26,   30,   27,   24,   28,   26,   31,   23,   27,
       30,   28,    5,    6,   32,    7,    8,   27,   35,   21,
       29,   34,   40,   35,   80,   28,   19,   18,   17,   34,
       36,   28,   37,   29,   32,   15,   37,   36,   35,   28,
       37,   34,   40,   35,   80,   80,   32,   38,   35,   34,
       36,   41,   37,   38,   43,   40,   37,   36,   39,   34,
       37,    9,   65,   42,   39,   37,    0,   38,   36,   42,
       66,   41,    0,   38,   43,    0,    0,   69,   39,   41,
        0,   38,   65,   42,   39,    0,   43,   65,    0,   42,
       66,  104,   39,   68,   67,   42,   44,   69,    0,   74,

       44,   44,   44,   44,   44,   44,   44,   67,   66,   44,
        0,  104,  104,   68,   67,   69,   44,   70,   68,   74,
       44,   44,   44,   44,   44,   44,   44,   67,   77,   44,
       70,   74,   67,   76,   44,    0,   75,   70,    0,   78,
       79,   85,   81,   76,   79,    0,    0,    0,   77,    0,
       70,   82,   77,   76,   82,   70,   75,   86,   75,   78,
       79,   85,   81,   76,   79,   76,   81,   78,   79,   85,
       87,   82,   88,   93,   82,   82,   89,   86,   90,   95,
       92,  100,   96,   94,    0,   86,    0,    0,    0,    0,
       87,    0,   88,   93,   98,  102,   89,    0,   90,   95,

       92,  100,   96,   94,   87,   92,   88,   89,   94,   90,
      101,   93,   96,  100,   98,  102,  103,   95,  105,  102,
      107,  108,    0,  109,   98,    0,    0,  111,    0,    0,
      101,  112,  101,  126,  110,    0,  103,    0,  105,  117,
      107,  108,  105,  109,  103,  110,  109,  111,  107,  113,
      116,  112,  113,  126,  110,  108,  112,  115,  111,  117,
      115,  127,  118,  116,  128,  110,  118,  126,  110,  113,
      116,  117,  113,  113,  129,    0,  119,  115,  143,    0,
      115,  127,  118,  116,  128,    0,  118,    0,  116,  128,
      118,  115,  119,    0,  129,  127,  119,    0,  143,  129,

      131,    0,    0,  132,  130,  143,  136,  133,    0,    0,
      134,    0,  119,  130,  119,  120,  137,    0,    0,  120,
      131,  120,  120,  132,  130,  120,  136,  133,  120,  120,
      134,  120,  120,  130,  131,  120,  137,  132,  130,  120,
      136,  120,  120,  133,  138,  120,  134,  139,  120,  120,
      137,  120,  120,  120,  135,    0,  135,  140,  144,  145,
      153,    0,  151,  140,  138,    0,    0,  139,  152,    0,
        0,    0,  138,  154,  135,  139,  135,  140,  144,  145,
      153,  155,  151,  140,  156,  144,  145,  157,  152,  153,
      135,  140,  151,  154,    0,  158,  159,  160,  152,  161,

        0,  155,  154,  162,  156,  163,  164,  157,    0,  166,
        0,  155,  169,    0,  156,  158,  159,  160,  170,  161,
      158,  157,    0,  162,  161,  163,  164,    0,  162,  166,
      159,  171,  169,  160,  164,  172,  166,  174,  170,  163,
        0,  173,  169,  176,  176,    0,  173,  170,    0,    0,
      177,  171,    0,    0,    0,  172,    0,  174,  187,  177,
        0,  173,    0,  176,  176,  171,  173,  174,  178,  172,
      177,  178,  180,  176,  179,  173,  181,  179,  187,  177,
      180,  182,    0,  187,  177,  188,  189,  181,  178,    0,
        0,  178,  180,  195,  179,    0,  181,  179,  178,    0,

      180,  182,    0,    0,  179,  188,  189,  181,  180,  196,
      188,  189,  181,  195,    0,  182,  184,  197,  184,  195,
      198,  206,  184,  184,  184,  184,  207,  184,    0,  196,
      212,    0,    0,  209,  199,  196,  184,  197,  184,  199,
      198,  206,  184,  184,  184,  184,  207,  184,  197,  213,
      212,  198,  184,  209,  199,  206,  214,  215,  209,  199,
      207,  222,    0,    0,  212,  199,  223,  224,    0,  213,
      226,  227,    0,  229,  230,    0,  214,  215,  236,    0,
        0,  222,  214,  213,  234,  235,  223,  224,  215,    0,
      226,  227,  224,  229,  230,  222,  227,    0,  236,  229,

      223,  226,  244,    0,  234,  235,  237,  238,  230,  231,
      245,  238,  231,  236,    0,  234,  235,  231,  231,    0,
      247,    0,  244,    0,  247,    0,  237,  238,  248,  231,
      245,  238,  231,  244,  249,    0,  252,  231,  231,  253,
      247,  237,  238,  231,  247,  245,  255,  256,  248,  257,
        0,    0,  248,    0,  249,  247,  252,    0,  249,  253,
      252,    0,    0,  253,    0,    0,  255,  256,    0,  257,
        0,  255,  256,    0,  257,  262,  262,  263,  263,  264,
      264,  267,  267,  268,  268,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst short int yy_rule_linenum[45] =
    {   0,
       89,   99,  101,  106,  112,  116,  123,  125,  139,  140,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  154,  155,  156,  157,  158,  167,  180,
      189,  197,  205,  232,  244,  251,  258,  267,  272,  281,
      291,  298,  306,  307
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
#define INITIAL 0
/*
*  The scanner definition for COOL.
*/
/*
*  Stuff enclosed in %{ %} in the first section is copied verbatim to the
*  output, so headers and global definitions are placed here to be visible
* to the code in the file.  Do not remove anything that was here initially
*/
#line 12 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr = string_buf;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

//added by myself below:

static int nested_comment_count = 0;
static int string_length = 0;

/*
 *  Add Your own definitions here
 */

/*
* Define names for regular expressions here.
*/
/*cannot use (?i:xxx), flex complains about "unrecognized rule"*/
#define COMMENT 1

#define STRING 2

#define STRING_ERROR 3

#line 713 "cool-lex.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 83 "cool.flex"


 /*
 * 1. Invalid characters
 */

#line 882 "cool-lex.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 262 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 786 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */

		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 45 )
				fprintf( stderr, "--accepting rule at line %d (\"%s\")\n",
				         yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 45 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 46 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 89 "cool.flex"
{
  strcpy(string_buf_ptr,yytext);
  cool_yylval.error_msg=string_buf_ptr;
  return ERROR;
}
	YY_BREAK
/*
  *  2. Nested comments
  */
case 2:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 99 "cool.flex"
{}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "cool.flex"
{
  BEGIN(COMMENT);
  nested_comment_count = 1;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 106 "cool.flex"
{
  strcpy(string_buf_ptr,"Unmatched *)");
  cool_yylval.error_msg=string_buf_ptr;
  return ERROR;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 112 "cool.flex"
{
  nested_comment_count++;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 116 "cool.flex"
{
  nested_comment_count--;
  if(nested_comment_count == 0){
    BEGIN(INITIAL);
  }
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 123 "cool.flex"
{curr_lineno++;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 125 "cool.flex"
{}
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 127 "cool.flex"
{
  BEGIN(INITIAL);
  strcpy(string_buf_ptr,"EOF in comment");
  cool_yylval.error_msg=string_buf_ptr;
  nested_comment_count = 0;
  return ERROR;
}
	YY_BREAK
/*
  * 3. Keywords
  */
case 9:
YY_RULE_SETUP
#line 139 "cool.flex"
{return CLASS;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 140 "cool.flex"
{return ELSE;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 141 "cool.flex"
{return FI;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 142 "cool.flex"
{return IF;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 143 "cool.flex"
{return IN;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 144 "cool.flex"
{return INHERITS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 145 "cool.flex"
{return LET;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 146 "cool.flex"
{return LOOP;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 147 "cool.flex"
{return POOL;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 148 "cool.flex"
{return THEN;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 149 "cool.flex"
{return WHILE;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 150 "cool.flex"
{return CASE;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 151 "cool.flex"
{return ESAC;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 152 "cool.flex"
{return OF;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 153 "cool.flex"
{return DARROW;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 154 "cool.flex"
{return NEW;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 155 "cool.flex"
{return ISVOID;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 156 "cool.flex"
{return ASSIGN;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 157 "cool.flex"
{return NOT;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 158 "cool.flex"
{return LE;}
	YY_BREAK
/*
  *  4. String constants (C syntax)
  *  Escape sequence \c is accepted for all characters c. Except for 
  *  \n \t \b \f, the result is c.
  *
  */
case 29:
YY_RULE_SETUP
#line 167 "cool.flex"
{
  BEGIN(STRING);
  string_length = 0;
}
	YY_BREAK
case YY_STATE_EOF(STRING):
#line 172 "cool.flex"
{
  BEGIN(INITIAL);
  strcpy(string_buf_ptr,"EOF in string constant");
  cool_yylval.error_msg=string_buf_ptr;
  string_length = 0;
  return ERROR;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 180 "cool.flex"
{
  BEGIN(INITIAL);
  curr_lineno++;
  strcpy(string_buf_ptr,"Unterminated string constant");
  cool_yylval.error_msg=string_buf_ptr;
  string_length = 0;
  return ERROR;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 189 "cool.flex"
{
  BEGIN(INITIAL);
  string_buf_ptr[string_length]='\0';
  cool_yylval.symbol=stringtable.add_string(string_buf_ptr);
  string_length = 0;
  return STR_CONST;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 197 "cool.flex"
{
  BEGIN(STRING_ERROR);
  strcpy(string_buf_ptr,"String contains null character.");
  cool_yylval.error_msg=string_buf_ptr;
  string_length = 0;
  return ERROR;
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 205 "cool.flex"
{
  if(string_length==MAX_STR_CONST){
    BEGIN(STRING_ERROR);
    strcpy(string_buf_ptr,"String constant too long");
    cool_yylval.error_msg=string_buf_ptr;
    string_length = 0;
    return ERROR;
  }else{
    switch(yytext[1]){
      case 'n':
        string_buf_ptr[string_length++] = '\n';
        break;
      case 't':
        string_buf_ptr[string_length++] = '\t';
        break;
      case 'b':
        string_buf_ptr[string_length++] = '\b';
        break;
      case 'f':
        string_buf_ptr[string_length++] = '\f';
        break;
      default:
        string_buf_ptr[string_length++] = yytext[1];
    }
  }
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "cool.flex"
{
  if(string_length==MAX_STR_CONST-1){
    BEGIN(STRING_ERROR);
    strcpy(string_buf_ptr,"String constant too long");
    cool_yylval.error_msg=string_buf_ptr;
    string_length = 0;
    return ERROR;
  }else{
    string_buf_ptr[string_length++]=yytext[0];
  }
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 244 "cool.flex"
{
  if(yytext[0]=='\n'){
    curr_lineno++;
  }
  BEGIN(INITIAL);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 251 "cool.flex"
{

}
	YY_BREAK
/*
  *  5. Int constants
  */
case 37:
YY_RULE_SETUP
#line 258 "cool.flex"
{
  cool_yylval.symbol=inttable.add_string(yytext);
  return INT_CONST;
}
	YY_BREAK
/*
  *  6. Bool constants
  */
case 38:
YY_RULE_SETUP
#line 267 "cool.flex"
{
  cool_yylval.boolean=1;
  return BOOL_CONST;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 272 "cool.flex"
{
  cool_yylval.boolean=0;
  return BOOL_CONST;
}
	YY_BREAK
/*
  *  7. OBJECTID
  */
case 40:
YY_RULE_SETUP
#line 281 "cool.flex"
{

  cool_yylval.symbol=idtable.add_string(yytext);
  return TYPEID;
}
	YY_BREAK
/*
  *  8. TYPEID
  */
case 41:
YY_RULE_SETUP
#line 291 "cool.flex"
{
  cool_yylval.symbol=idtable.add_string(yytext);
  return OBJECTID;
}
	YY_BREAK
/*
  *  9. Operators and other characters
  */
case 42:
YY_RULE_SETUP
#line 298 "cool.flex"
{
  return yytext[0];
}
	YY_BREAK
/*
  *  10. OTHERS
  */
case 43:
YY_RULE_SETUP
#line 306 "cool.flex"
{curr_lineno++;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 307 "cool.flex"
{}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 309 "cool.flex"
ECHO;
	YY_BREAK
#line 1358 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING_ERROR):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 54);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 262 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 54;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 262 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 261);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 309 "cool.flex"

